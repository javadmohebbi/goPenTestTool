package main

import (
	"flag"
	"fmt"
	"os"
	"strconv"

	"github.com/olekukonko/tablewriter"

	"github.com/javadmohebbi/goPenTestTool/scanner"
)

func main() {

	// define -target flag
	target := flag.String("target", "192.168.0.0/16", fmt.Sprint("Target to scan. It MUST be in CIDR format.\nExamples:\n\t1. 192.168.1.1/24\n\t2. 192.168.0.0/16"))

	// define -threads flag
	conCurrentThreads := flag.Int("maxthreads", 10, fmt.Sprint("Maximum number of threads: between 5 to 100"))

	if *conCurrentThreads < 5 && *conCurrentThreads > 100 {
		*conCurrentThreads = 10
	}

	// define -verbose flag
	verbose := flag.Bool("verbose", false, fmt.Sprint("Use this flag if you want more info about the scanned targets"))

	// parse flags
	flag.Parse()

	// check if target is not empty
	if *target == "" {
		fmt.Printf("[ERROR] not enough argument provided!\n\t-target x.x.x.x/x MUST be provided\n\n")
		flag.PrintDefaults()
		os.Exit(127)
	}

	// create new instance of TCPScanner
	tcpScanner := scanner.TCPScanner{
		Target: *target,

		// JustOpenPorts: true,

		Verbose: *verbose,

		MaxThreads: *conCurrentThreads,
	}

	// run tcp scan
	result, err := tcpScanner.Scan()

	// check if scan has error
	if err != nil {
		fmt.Printf("[ERROR] %v", err)
		os.Exit(126)
	}

	// convert struct for better result
	var tbl [][]string
	for _, r := range result {
		if r.IsOpen == true || *verbose {
			tbl = append(tbl,
				[]string{
					r.IP, strconv.Itoa(int(r.Port)), r.PortName, r.IsOpen.String(),
				},
			)
		}
	}

	table := tablewriter.NewWriter(os.Stdout)
	table.SetHeader([]string{"IP", "PORT", "PORT NAME", "STATUS"})
	table.SetBorder(true)
	table.AppendBulk(tbl)
	table.Render()

}
