package main

import (
	"flag"
	"fmt"
	"os"
	"time"

	"github.com/javadmohebbi/goPenTestTool/scanner"
)

func main() {

	// define -target flag
	target := flag.String("target", "", fmt.Sprint("Target to scan.\nExamples:\n\t1. Hostname or IP address -> 192.168.1.1 or example.local\n\t2. Multiple IPs (comma delimited) -> 192.168.1.1,192.168.1.2, ...\n\t3. IP/Mask (CIDR) -> 192.168.0.1/24\n\t4. IP Range -> 192.168.1.2-192.168.2.100"))

	// define -ports
	ports := flag.String("ports", "", fmt.Sprint("Target ports to scan. If not provided, all ports will be scanned.\nExamples:\n\t1. Single Port -> 22\n\t2. Multiple Ports (comma delimited) -> 80,443,22,...\n\t3. Port Range -> 1-1024"))

	timeout := flag.Int("timeout", 0, "Timeout in seconds")

	// define -threads flag
	conCurrentThreads := flag.Int("maxthreads", 10, fmt.Sprint("Maximum number of threads: between 5 to 1000"))

	if *conCurrentThreads < 5 && *conCurrentThreads > 1000 {
		*conCurrentThreads = 10
	}

	// define -verbose flag
	verbose := flag.Bool("verbose", false, fmt.Sprint("Use this flag if you want more info about the scanned targets"))

	// parse flags
	flag.Parse()

	// check if target is not empty
	if *target == "" {
		fmt.Printf("[ERROR] not enough argument!\n\t-target MUST be provided\n\n")
		flag.PrintDefaults()
		os.Exit(127)
	}

	// var doneChannel = make(chan bool)

	// c := make(chan os.Signal, 1)

	// signal.Notify(c, os.Interrupt)
	// signal.Notify(c, syscall.SIGTERM)

	// go func() {

	// create new instance of TCPScanner
	tcpScanner := scanner.TCPScanner{
		Target: *target,

		TargetPorts: *ports,

		// JustOpenPorts: true,

		Verbose: *verbose,

		MaxThreads: *conCurrentThreads,

		Timeout: time.Duration(int64(*timeout)),
	}

	// run tcp scan
	var result []scanner.TCPScannerResponse
	err := tcpScanner.Scan(&result)

	// check if scan has error
	if err != nil {
		fmt.Printf("[ERROR] %v", err)
		os.Exit(126)
	}

	tcpScanner.PrintTable(result)

}
