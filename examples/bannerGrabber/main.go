package main

import (
	"flag"
	"fmt"
	"time"

	"github.com/javadmohebbi/goPenTestTool/gpttype"
	"github.com/javadmohebbi/goPenTestTool/grabber"
)

func main() {

	// define -target flag
	target := flag.String("target", "", fmt.Sprint("Target to grab. Host name/IP/FQDN"))

	// define -port flag
	port := flag.Int("port", -1, fmt.Sprint("Target Port to grab."))

	// define -type flag
	typ := flag.String("type", "http", fmt.Sprint("Type of grabbing\n\thttp, https, ssh, telnet"))

	// define -verbose flag
	verbose := flag.Bool("verbose", false, fmt.Sprint("Use this flag if you want more info about grabbing process"))

	// define -timeout flag
	timeout := flag.Int("timeout", 3, "Timeout(in seconds) for each port scan. The greater timeout results more accurate scan")

	// define -output flag
	output := flag.String("output", "", "Output file")

	// define -threads flag
	conCurrentThreads := flag.Int("maxthreads", 10, fmt.Sprint("Maximum number of threads: between 5 to 8192"))

	flag.Parse()

	// create new instance of grabber
	g, err := grabber.New(grabber.GrabRequest{
		// Target
		Target: grabber.Target{
			Host: *target,
			Port: gpttype.Port(*port),
		},

		// type
		Type: grabber.Type(*typ),

		Verbose: *verbose,

		OutputPath: *output,

		MaxThreads: *conCurrentThreads,

		Timeout: time.Duration(int64(*timeout)),
	})

	// check for error
	if err != nil {
		panic(err)
	}

	// grab the banner
	err = g.Grab()

	// check for error
	if err != nil {
		panic(err)
	}

	// print to console
	g.Print()

	// write to file
	g.WriteToFile()
}
