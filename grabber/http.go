package grabber

import (
	"crypto/tls"
	"fmt"
	"net/http"
	"sync"

	"github.com/gookit/color"

	"github.com/cheggaaa/pb"

	"github.com/javadmohebbi/goPenTestTool/utils/port"
	"github.com/javadmohebbi/goPenTestTool/utils/reports"
	"golang.org/x/sync/semaphore"
)

type HTTPGrabber struct {
	GrabRequest

	lock *semaphore.Weighted
	wg   sync.WaitGroup

	service port.Service

	needReport bool
	report     *reports.Reports

	barInited bool
	bar       *pb.ProgressBar

	result map[string][]string
}

// Grab HTTP
func (g *HTTPGrabber) Grab() error {
	// print target to console
	fmt.Printf("Target=%s://%s:%v ==> %v\n", g.Type, g.Target.Host, g.Target.Port, g.Type)

	// default accept insecure
	http.DefaultTransport.(*http.Transport).TLSClientConfig = &tls.Config{InsecureSkipVerify: true}

	client := &http.Client{}
	req, _ := http.NewRequest("HEAD", fmt.Sprintf("%s://%s:%d/", g.Type, g.Target.Host, g.Target.Port), nil)

	// req.Header.Set("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8")
	// req.Header.Set("Accept-Encoding", "gzip, deflate, br")
	// req.Header.Set("Accept-Language", "en-US,en;q=0.5")
	// req.Header.Set("Cache-Control", "no-cache")
	// req.Header.Set("Connection", "keep-alive")
	// req.Header.Set("Pragma", "no-cache")
	// req.Header.Set("TE", "Trailers")
	// req.Header.Set("Upgrade-Insecure-Requests", "1")
	// req.Header.Set("User-Agent", "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:84.0) Gecko/20100101 Firefox/84.0")

	res, err := client.Do(req)

	// res, err := http.Head(fmt.Sprintf("%s://%s:%d", g.Type, g.Target.Host, g.Target.Port))

	// error check
	if err != nil {
		panic(err)
	}

	// get content length
	// contentlength := res.ContentLength

	// if content length not 0, process the rest or return an error
	// if contentlength > 0 {
	g.result = res.Header
	return nil
	// }
	// return errors.New("[Error] No content")
}

// printTable will print output to the table
func (t *HTTPGrabber) Print() {
	fmt.Println("")
	for k, values := range t.result {
		color.Cyan.Printf("  %v: ", k)
		str := ""
		for _, v := range values {
			str += v + "\n"
		}
		color.White.Printf(str)
	}
	fmt.Println("")
}
