package grabber

import (
	"crypto/tls"
	"fmt"
	"net/http"
	"sync"

	"github.com/cheggaaa/pb"

	"github.com/javadmohebbi/goPenTestTool/utils/port"
	"github.com/javadmohebbi/goPenTestTool/utils/reports"
	"golang.org/x/sync/semaphore"
)

type HTTPGrabber struct {
	GrabRequest

	lock *semaphore.Weighted
	wg   sync.WaitGroup

	service port.Service

	needReport bool
	report     *reports.Reports

	barInited bool
	bar       *pb.ProgressBar
}

// Grab HTTP
func (g *HTTPGrabber) Grab() (*GrabResponse, error) {
	// print target to console
	fmt.Printf("Target=%s:%v ==> %v\n", g.Target.Host, g.Target.Port, g.Type)

	// default accept insecure
	http.DefaultTransport.(*http.Transport).TLSClientConfig = &tls.Config{InsecureSkipVerify: true}

	res, err := http.Head(fmt.Sprintf("%s://%s:%d", g.Type, g.Target.Host, g.Target.Port))

	if err != nil {
		panic(err)
	}

	contentlength := res.ContentLength
	fmt.Printf("ContentLength:%v\n", contentlength)

	return nil, nil
}
