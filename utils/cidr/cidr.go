package cidr

import (
	"net"
)

// ParseIPv4Array will get target x.x.x.x/x IP/MASK (CIDR)
// and returns list of IPs as array of string
// This function is using the https://stackoverflow.com/questions/60540465/go-how-to-list-all-ips-in-a-network answer
// to extract IPs from the target CIDR
func ParseIPv4Array(target string) ([]string, error) {

	// extrct IP, mask
	ip, ipnet, err := net.ParseCIDR(target)
	if err != nil {
		return []string{}, err
	}

	var ips []string
	if ipnet.Mask.String() == "ffffffff" {
		ips = append(ips, ip.String())
	} else {
		for ip := ip.Mask(ipnet.Mask); ipnet.Contains(ip); increaseOne(ip) {
			ips = append(ips, ip.String())
		}

		// remove network address and broadcast address
		lenIPs := len(ips)
		switch {
		case lenIPs < 2:
			return ips, nil
		default:
			return ips[1 : len(ips)-1], nil
		}
	}

	return ips, nil

}

// it will increase one to the IP
func increaseOne(ip net.IP) {
	for j := len(ip) - 1; j >= 0; j-- {
		ip[j]++
		if ip[j] > 0 {
			break
		}
	}
}
